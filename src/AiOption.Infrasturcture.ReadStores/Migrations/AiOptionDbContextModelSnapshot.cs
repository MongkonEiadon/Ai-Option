// <auto-generated />
using System;
using AiOption.Infrasturcture.ReadStores;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AiOption.Infrasturcture.ReadStores.Migrations
{
    [DbContext(typeof(AiOptionDbContext))]
    partial class AiOptionDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AiOption.Infrasturcture.ReadStores.ReadModels.CustomerReadModelDto", b =>
                {
                    b.Property<string>("AggregateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CustomerId");

                    b.Property<string>("InvitationCode");

                    b.Property<DateTimeOffset>("LastLogin");

                    b.Property<int?>("Level");

                    b.Property<string>("Password");

                    b.Property<string>("Token");

                    b.Property<string>("UserName");

                    b.HasKey("AggregateId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("AiOption.Infrasturcture.ReadStores.ReadModels.IqAccountReadModelDto", b =>
                {
                    b.Property<string>("AggregateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AccountId");

                    b.Property<string>("CustomerId");

                    b.Property<string>("IqOptionToken");

                    b.Property<string>("Password");

                    b.Property<DateTimeOffset>("TokenUpdatedDate");

                    b.Property<string>("UserName");

                    b.HasKey("AggregateId");

                    b.ToTable("IqAccounts");
                });

            modelBuilder.Entity("EventFlow.EntityFramework.EventStores.EventEntity", b =>
                {
                    b.Property<long>("GlobalSequenceNumber")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AggregateId");

                    b.Property<string>("AggregateName");

                    b.Property<int>("AggregateSequenceNumber");

                    b.Property<Guid>("BatchId");

                    b.Property<string>("Data");

                    b.Property<string>("Metadata");

                    b.HasKey("GlobalSequenceNumber");

                    b.HasIndex("AggregateId", "AggregateSequenceNumber")
                        .IsUnique()
                        .HasFilter("[AggregateId] IS NOT NULL");

                    b.ToTable("EventEntity");
                });

            modelBuilder.Entity("EventFlow.EntityFramework.SnapshotStores.SnapshotEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AggregateId");

                    b.Property<string>("AggregateName");

                    b.Property<int>("AggregateSequenceNumber");

                    b.Property<string>("Data");

                    b.Property<string>("Metadata");

                    b.HasKey("Id");

                    b.HasIndex("AggregateName", "AggregateId", "AggregateSequenceNumber")
                        .IsUnique()
                        .HasFilter("[AggregateName] IS NOT NULL AND [AggregateId] IS NOT NULL");

                    b.ToTable("SnapshotEntity");
                });
#pragma warning restore 612, 618
        }
    }
}
